<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Charles 证书过期处理</title>
    <url>/2023/05/09/Charles-%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>最近打开 Charles 抓包时突然发现，抓包 https 时无法抓取明文报文包了。我也没改过其他配置。检查完我的 Charles 配置和确认了我的手机已经安装了安全证书，发现还是没能抓到明文包。<br>然后在手机上看到安装的证书刚好过期了，很奇怪怎么过期了呢？百度了一下知道了原因。</p>
<ol>
<li>点击 Help -&gt; SSL Proxying -&gt; Reset Charles Root Certificate..</li>
<li>为 PC 端重新安装根证书。Help -&gt; SSL Proxying -&gt; Install Charles Root。注意选择的路径：受信任的根证书颁发机构。</li>
<li>为手机端重新安装根证书。Help -&gt; SSL Proxying -&gt; Install Charles Root on Mobile Device or Remote Server。<br>注意如果是 IOS，安装完证书，需要在通用 -&gt; 关于本机 -&gt; 证书信任设置，启用安装好的证书。</li>
</ol>
<p>然后看到证书的有效期是一年，之后过期了也要重新设置。</p>
]]></content>
      <tags>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 数据管理</title>
    <url>/2023/05/17/Docker-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>昨天同事问我</p>
<blockquote><p>有空研究一下 Docker 容器的挂载，目前 volume 的机制是，宿主机的挂载目录下的内容覆盖容器内部的。有没有机制是容器内部的文件夹内容覆盖宿主机的</p>
</blockquote>
<span id="more"></span>
<p>我自己也确实有一些疑惑，但是我之前的操作结果都是宿主机的覆盖容器内部的。<br>然后实践了一下，验证了这个结论。<br>但是我也记得也确定有启动时容器内目录挂载出来的例子。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name artalk \</span><br><span class="line">    -p 8080:23366 \</span><br><span class="line">    -v $(pwd)/data:/data \</span><br><span class="line">    --restart=always \</span><br><span class="line">    artalk/artalk-go</span><br></pre></td></tr></table></figure>
<img src="/2023/05/17/Docker-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16842308209820.png" class="" title="把容器里的文件挂出来的例子">
<p>奇怪，这个怎么就挂出来了？<br>同事给了我他的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name nginx-01 -p 7777:80 -v /usr/local/src/config:/etc/nginx/conf.d -d nginx</span><br></pre></td></tr></table></figure>
<p>容器内的 <code>/etc/nginx/conf.d</code> 本来是有东西的<br>经过这么一挂载，宿主机的 <code>/usr/local/src/config</code> 没东西，容器里的 <code>/etc/nginx/conf.d</code> 东西也没了。</p>
<img src="/2023/05/17/Docker-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16843146184145.png" class="" title="宿主机的">
<img src="/2023/05/17/Docker-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16843148293239.png" class="" title="容器内的">

<p>也验证了这么一个结论：启动的时候宿主机会覆盖容器里的。</p>
<p>那么上面“把容器里的文件挂出来的例子”是怎么回事呢？<br>我找到了它的 <code>Dockerfile</code>，顺着代码找到了它的 <code>entrypoint.sh</code></p>
<img src="/2023/05/17/Docker-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16842330312171.png" class="" title="entrypoint.sh">
<p>原来它启动的时候创建了这个文件，所以把文件挂出来了。<br>看它的代码，还会打印创建日志。我看看启动日志。</p>
<img src="/2023/05/17/Docker-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_1684233395330.png" class="" title="启动日志">
<p>确实打印了创建文件的日志。</p>
<p>如果真的想把容器内的文件挂出来有什么办法呢？</p>
<blockquote><p>在容器中管理数据主要有两种方式：</p>
<ul>
<li>数据卷（Volumes）</li>
<li>挂载主机目录 (Bind mounts)</li>
</ul>
</blockquote>
<p>关于数据卷的定义</p>
<blockquote><p>数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<p><code>数据卷</code> 可以在容器之间共享和重用</p>
<p>对 <code>数据卷</code> 的修改会立马生效</p>
<p>对 <code>数据卷</code> 的更新，不会影响镜像</p>
<p><code>数据卷</code> 默认会一直存在，即使容器被删除</p>
<blockquote>
<p>注意：数据卷 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>
</blockquote>
</blockquote>
<p>利用上面的这一点，就可以启动的时候把容器的数据，复制到数据卷。</p>
<p><code>docker run -v </code> 什么时候用的数据卷，什么时候用的挂载目录呢？简单的来说如果你命令中的宿主机路径没带 <code>/</code>，创建的就是数据卷。</p>
<p>而前面开头说的就是挂载主机目录。</p>
<p>讨论下来比较靠谱方案</p>
<ol>
<li>用数据卷挂载。</li>
<li>程序运行时，产生文件把挂载出来。（如果特意是要在启动时把容器的配置文件挂出来的个人想法见下面）</li>
</ol>
<p>最后对于 Docker 运行时产生文件，下面是我和同事讨论时，我的想法。</p>
<blockquote><p>和我们平时挂载的操作一样。需要写点命令。当你把项目提供给别人使用时有些用。直接把模板配置文件给你挂出来了，改改就能用，上手起来快。不然你就得单独给别人提供配置文件。我遇到配置文件很复杂的，那种一般就不挂出模板配置文件，别人一般自己有一份，然后又需要一个容器版的，拿自己配置文件直接就能把程序跑起来。</p>
</blockquote>


]]></content>
  </entry>
  <entry>
    <title>通过 hexo 搭建博客</title>
    <url>/2023/05/01/build-a-blog-with-hexo/</url>
    <content><![CDATA[<p>主流的博客有很多，选择 <a href="https://hexo.io/zh-cn/docs/">Hexo</a> 是因为它可以和 Github 搭配使用，用 <a href="https://docs.github.com/zh/pages/getting-started-with-github-pages">Github Pages</a> 可以搭建免费的个人博客。而 hexo 的官网网站有中文翻译，也更受国人青睐。我去翻了一下 hexo 的官方 Github 仓库，一直在持续维护，决定了选用它作为建站的系统。废话不多说开始动手。下面大部分步骤都与 hexo 官网大同小异，有些步骤，则是我在实际操作时发现的问题和结合我自己的理解做的修改。</p>
<span id="more"></span>

<h3 id="创建同名的-github-io-仓库"><a href="#创建同名的-github-io-仓库" class="headerlink" title="创建同名的 github.io 仓库"></a>创建同名的 github.io 仓库</h3><p>Repository name 设置为 <code>&lt;Owner&gt;.github.io</code></p>
<p>仓库属性设置为 Public</p>
<p>勾上 Add a README file ，免得 Github 警告</p>
<img src="/2023/05/01/build-a-blog-with-hexo/create-same-name-github-io.png" class="">

<p>输入网址，已经能看到生成的静态页面</p>


<h3 id="创建-gh-pages-空分支，用于发布打包后的静态资源"><a href="#创建-gh-pages-空分支，用于发布打包后的静态资源" class="headerlink" title="创建 gh-pages 空分支，用于发布打包后的静态资源"></a>创建 gh-pages 空分支，用于发布打包后的静态资源</h3><p>Code -&gt; branches -&gt; New branch</p>
<img src="/2023/05/01/build-a-blog-with-hexo/image-20230501185547290.png" class="">

<h3 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h3><p>安装新版的 node.js 即可。</p>
<h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>按照官网提供的 npm 命令安装。</p>
<h3 id="修改-hexo-的-config-yml-的必要配置。"><a href="#修改-hexo-的-config-yml-的必要配置。" class="headerlink" title="修改 hexo 的 _config.yml 的必要配置。"></a>修改 hexo 的 _config.yml 的必要配置。</h3><p>参考官网自己调整一下</p>
<img src="/2023/05/01/build-a-blog-with-hexo/1682939030477.png" class="">

<h3 id="验证一下默认主题是否可以正常本地显示"><a href="#验证一下默认主题是否可以正常本地显示" class="headerlink" title="验证一下默认主题是否可以正常本地显示"></a>验证一下默认主题是否可以正常本地显示</h3><p>常用的两个命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 启动服务器</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h3 id="更换主题（可选）"><a href="#更换主题（可选）" class="headerlink" title="更换主题（可选）"></a>更换主题（可选）</h3><p>换到 <a href="https://github.com/next-theme/hexo-theme-next">next-theme&#x2F;hexo-theme-next: 🎉 Elegant and powerful theme for Hexo. (github.com)</a> 主题，这个是当前 hexo 在 github 上最流行的主题，它的生态更加丰富、对新手更加友好，拓展插件丰富、教程丰富。推荐使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>本地验证新的主题，按需修改自己的主题配置文件。</p>
<h3 id="推送到-Github"><a href="#推送到-Github" class="headerlink" title="推送到 Github"></a>推送到 Github</h3><ol>
<li><p>使用 <code>node --version</code> 指令检查你电脑上的 Node.js 版本，并记下该版本 (例如：<code>v16.y.z</code></p>
</li>
<li><p>在储存库中建立 <code>.github/workflows/pages.yml</code>，并填入以下内容 (将 <code>16</code> 替换为上个步骤中记下的版本)：</p>
</li>
</ol>
<p>参考 <a href="https://hexo.io/zh-cn/docs/github-pages">在 GitHub Pages 上部署 Hexo | Hexo</a></p>
<p>我的是<code>v18.15.0</code>。<strong>更新了 actions 版本、node 版本</strong>。</p>
<p><code>.github/workflows/pages.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">18.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;18&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>

<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="https://theme-next.js.org/docs/">Documentation | NexT (theme-next.js.org)</a></li>
<li><a href="https://github.com/next-theme/hexo-theme-next/issues/4">【必读】更新说明及常见问题 · Issue #4 · next-theme&#x2F;hexo-theme-next (github.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>与时间赛跑</title>
    <url>/2019/01/23/%E5%92%8C%E6%97%B6%E9%97%B4%E8%B5%9B%E8%B7%91/</url>
    <content><![CDATA[<blockquote><p>虽然明天还会有新的太阳，但永远不会有今天的太阳。</p>
<footer><strong>林清玄</strong><cite>《和时间赛跑》</cite></footer></blockquote>

]]></content>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Docker 安装 openwrt</title>
    <url>/2023/05/11/%E7%94%A8-Docker-%E5%AE%89%E8%A3%85-openwrt/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前尝试过自己搭建 virtualbox 虚拟机搭建了 openwrt，想在公司网络也搭建一个 openwrt 给自己用，有需要的同事也可以分享给他们用。但是受限于公司的 windows 虚拟机开启不了虚拟化，安装的 virtualbox 不能安装 openwrt。 所以我另需它路，想在公司的 linux 虚拟机上用 docker 安装 openwrt。几经网上搜索资料和折腾，成功在 linux 服务器上用 docker 安装了 openwrt。我使用的环境是 centos7。</p>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="打开网卡混杂模式"><a href="#打开网卡混杂模式" class="headerlink" title="打开网卡混杂模式"></a><strong>打开网卡混杂模式</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ip link set eth0 promisc on</span><br></pre></td></tr></table></figure>

<h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a><strong>创建网络</strong></h3><p><code>--subnet</code> 和 <code>--gateway</code> 在一个网段<br><code>--gateway</code> 和宿主机 centos 7 使用同一个网关</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.123.0/24 --gateway=192.168.123.1 -o parent=eth0 macnet</span><br></pre></td></tr></table></figure>

<p>可以使用 <code>docker network ls</code> 看网络是否成功创建了。</p>
<h3 id="拉取镜像或自己创建镜像"><a href="#拉取镜像或自己创建镜像" class="headerlink" title="拉取镜像或自己创建镜像"></a>拉取镜像或自己创建镜像</h3><p>有三种方案可选：</p>
<ol>
<li><p>用现成的 docker 镜像。推荐 <code>SuLingGG</code> 的自编译固件镜像。</p>
<p>他选的是 <code>immortalwrt</code> 的 <a href="https://github.com/immortalwrt/immortalwrt/tree/openwrt-18.06-k5.4">openwrt-18.06-k5.4</a> 已经 <code>EOL</code>，随之截至到我发博 <code>SuLingGG</code>的 <a href="https://github.com/SuLingGG/OpenWrt-Docker">OpenWrt-Docker</a> 已改为只读。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>用固件编译后的 <code>tar.gz</code> 压缩包，自己转成 docker 镜像。命令 <code>docker import openwrt-04.18.2023-x86-64-generic-rootfs.tar.gz openwrt </code></p>
<p><strong>语法：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><p>-c : 应用docker 指令创建镜像；</p>
</li>
<li><p>-m : 提交时的说明文字；</p>
</li>
</ul>
<p>推荐 <code>kiddin9</code> 大佬的 <a href="https://github.com/kiddin9/OpenWrt_x86-r2s-r4s-r5s-N1">OpenWrt_x86-r2s-r4s-r5s-N1</a>用他分享的<code>一分钟在线编译定制专属固件:</code> <a href="https://supes.top/">supes.top</a>，编译新版本 openwrt固件，然后选择 <code>下载镜像 -&gt; XXX.TAR.GZ</code>。</p>
</li>
<li><p>自己编译固件，然后走 <code>2</code>。</p>
</li>
</ol>
<h3 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart always --name &lt;contain_name&gt; -d --network macnet --privileged &lt;image_name&gt; /sbin/init</span><br></pre></td></tr></table></figure>

<ul>
<li><code>contain_name</code> 容器名</li>
<li><code>image_name </code>  镜像名</li>
</ul>
<h3 id="进入容器并修改相关参数"><a href="#进入容器并修改相关参数" class="headerlink" title="进入容器并修改相关参数"></a>进入容器并修改相关参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it &lt;contain_name&gt; bash</span><br></pre></td></tr></table></figure>

<ul>
<li><code>contain_name</code> 容器名</li>
</ul>
<p>执行此命令后我们便进入 OpenWrt 的命令行界面，首先，我们需要编辑 OpenWrt 的网络配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/config/network</span><br></pre></td></tr></table></figure>

<p>我们需要更改 Lan 口设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">        option type &#x27;bridge&#x27;</span><br><span class="line">        option ifname &#x27;eth0&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option ipaddr &#x27;192.168.123.100&#x27;</span><br><span class="line">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">        option ip6assign &#x27;60&#x27;</span><br><span class="line">        option gateway &#x27;192.168.123.1&#x27;</span><br><span class="line">        option broadcast &#x27;192.168.123.255&#x27;</span><br><span class="line">        option dns &#x27;192.168.123.1&#x27;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<p>所有的 <code>192.168.123.x</code> 需要根据宿主机所处网段修改，<code>option gateway</code>和<code>option dns</code>填写路由器的 IP，若宿主机获得的 IP 为 <code>192.168.2.154</code>，路由器 IP 为<code>192.168.2.1</code>，则需要这样修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">        option type &#x27;bridge&#x27;</span><br><span class="line">        option ifname &#x27;eth0&#x27;</span><br><span class="line">        option proto &#x27;static&#x27;</span><br><span class="line">        option ipaddr &#x27;192.168.2.100&#x27;</span><br><span class="line">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">        option ip6assign &#x27;60&#x27;</span><br><span class="line">        option gateway &#x27;192.168.2.1&#x27;</span><br><span class="line">        option broadcast &#x27;192.168.2.255&#x27;</span><br><span class="line">        option dns &#x27;192.168.2.1&#x27;</span><br></pre></td></tr></table></figure>

<p><code>option ipaddr </code>项目定义了 OpenWrt 的 IP 地址，在完成网段设置后，IP最后一段可根据自己的爱好修改（前提是符合规则且不和现有已分配 IP 冲突）。</p>
<h3 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure>

<h3 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h3><p>移步到 <code>SuLingGG</code> 大佬的博客，他的博客非常详细。</p>
<p><a href="https://mlapp.cn/376.html">https://mlapp.cn/376.html</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><p><a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html">GitHub Actions 在线云编译 OpenWrt 固件 - P3TERX ZONE</a></p>
</li>
<li><p><a href="https://mlapp.cn/376.html">在Docker 中运行 OpenWrt 旁路网关</a></p>
</li>
<li><p><a href="https://www.right.com.cn/forum/thread-588747-1-1.html">【小狮子编译贴】抛砖引玉，为打造N1路由神器 - 恩山无线论坛</a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>记五月十五</title>
    <url>/2023/05/16/%E8%AE%B0%E4%BA%94%E6%9C%88%E5%8D%81%E4%BA%94/</url>
    <content><![CDATA[<blockquote><p>芝兰生于深谷，不以无人而不芳<br>君子修身养德，不以穷困而改志</p>
<footer><strong>左耳朵耗子 陈皓</strong></footer></blockquote>

<span id="more"></span>

<img src="e33e7ffc-1373-4322-8e9a-629c10ce5c25.webp" style="filter: grayscale(100%);">

<p>耗子叔，我认为他是一位技术的先驱和大牛，用自己的经历和博客，启蒙了许多学习编程的人的思想、为他们开阔的眼界、指导了方向，也感染了许多像我这样在软件开发路上的人。</p>
<p>他留在微博的最后一句话对我挺有启发的，这两天闲时，我总会体会这句话表达的意思。</p>
<blockquote><p>Great minds discuss ideas<br>Average minds discuss events<br>Small minds discuss people</p>
</blockquote>

<p>这是他对这句话的翻译</p>
<blockquote><p>卓越之识论道，<br>平常之识论事，<br>狹隘之识论人。</p>
</blockquote>

<p>我的理解：我们要用卓越和高标准的方式去讨论做事的方式、协议、规范；对于既定发生的事情，用就事论事的方式讨论这件事情，以客观的标准；当我们讨论一个人的时候，我们往往时狭隘的，我们容易把问题上升到个人的品格问题，对问题上纲上线，这是值得反思的。</p>
<p>写在最后</p>
<p>祝耗子叔一路走好，感谢您对 IT 行业做的贡献🙏</p>
]]></content>
  </entry>
</search>
